{"abi":[{"type":"fallback","stateMutability":"payable"},{"type":"receive","stateMutability":"payable"},{"type":"function","name":"aggregate","inputs":[{"name":"targets","type":"address[]","internalType":"address[]"},{"name":"data","type":"bytes[]","internalType":"bytes[]"},{"name":"values","type":"uint256[]","internalType":"uint256[]"},{"name":"refundTo","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"payable"},{"type":"error","name":"ArrayLengthsMismatch","inputs":[]}],"bytecode":{"object":"0x6080806040523460155761027d908161001b8239f35b600080fdfe60806040526004361015610015575b366101f457005b6000803560e01c63991f255f1461002c575061000e565b60803660031901126100aa5767ffffffffffffffff6004358181116100b5576100599036906004016100b9565b916024358181116100b1576100729036906004016100b9565b916044359081116100ad5761008b9036906004016100b9565b6064359690959194906001600160a01b03881688036100aa57506100ef565b80fd5b8580fd5b8480fd5b8280fd5b9181601f840112156100ea5782359167ffffffffffffffff83116100ea576020808501948460051b0101116100ea57565b600080fd5b9295939094861486861416156101e7578592604096610161575b5050505080610120575b5060206000526020526000f35b47156101135733811860018214021860003881804785620186a0f1610113576000526073600b5360ff6020536016600b47f01561015d5738610113565b3838fd5b91939592839060051b9283868637838501935b82518701908681018235908160208095018237600080809383603f19808b8d010135908b8b0101355af1156101de578286523d90523d90606083013e603f601f19913d010116920195888588146101cd57509591610174565b965050509150500192388080610109565b503d81803e3d90fd5b633b800a463d526004601cfd5b3d356366e0daa08160e01c14610208573d3dfd5b193d5260043d815b809236821015610263578135831a60018093019481156102375750815301905b9091610210565b3d19835260020194607f9150353d1a81811115610258575b16010190610230565b83810138843961024f565b600080809281305af43d82803e15610279573d90f35b3d90fd","sourceMap":"225:9256:56:-:0;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x60806040526004361015610015575b366101f457005b6000803560e01c63991f255f1461002c575061000e565b60803660031901126100aa5767ffffffffffffffff6004358181116100b5576100599036906004016100b9565b916024358181116100b1576100729036906004016100b9565b916044359081116100ad5761008b9036906004016100b9565b6064359690959194906001600160a01b03881688036100aa57506100ef565b80fd5b8580fd5b8480fd5b8280fd5b9181601f840112156100ea5782359167ffffffffffffffff83116100ea576020808501948460051b0101116100ea57565b600080fd5b9295939094861486861416156101e7578592604096610161575b5050505080610120575b5060206000526020526000f35b47156101135733811860018214021860003881804785620186a0f1610113576000526073600b5360ff6020536016600b47f01561015d5738610113565b3838fd5b91939592839060051b9283868637838501935b82518701908681018235908160208095018237600080809383603f19808b8d010135908b8b0101355af1156101de578286523d90523d90606083013e603f601f19913d010116920195888588146101cd57509591610174565b965050509150500192388080610109565b503d81803e3d90fd5b633b800a463d526004601cfd5b3d356366e0daa08160e01c14610208573d3dfd5b193d5260043d815b809236821015610263578135831a60018093019481156102375750815301905b9091610210565b3d19835260020194607f9150353d1a81811115610258575b16010190610230565b83810138843961024f565b600080809281305af43d82803e15610279573d90f35b3d90fd","sourceMap":"225:9256:56:-:0;;;;;;;;;-1:-1:-1;225:9256:56;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;225:9256:56;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;;;;225:9256:56;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;1407:5828;;;;;;1612:5617;;;;;;;;;;;;;;;1407:5828;1612:5617;;;;;;;1407:5828;1612:5617;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1612:5617:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7765:1714;7803:1670;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7803:1670:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"methodIdentifiers":{"aggregate(address[],bytes[],uint256[],address)":"991f255f"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ArrayLengthsMismatch\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"refundTo\",\"type\":\"address\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"vectorized.eth\",\"errors\":{\"ArrayLengthsMismatch()\":[{\"details\":\"The lengths of the input arrays are not the same.\"}]},\"kind\":\"dev\",\"methods\":{\"aggregate(address[],bytes[],uint256[],address)\":{\"details\":\"Aggregates multiple calls in a single transaction.\",\"params\":{\"data\":\"An array of calldata to forward to the targets.\",\"refundTo\":\"The address to transfer any remaining ETH in the contract after the calls.                 If `address(0)`, remaining ETH will NOT be refunded.                 If `address(1)`, remaining ETH will be refunded to `msg.sender`.                 If anything else, remaining ETH will be refunded to `refundTo`.\",\"targets\":\"An array of addresses to call.\",\"values\":\"How much ETH to forward to each target.\"},\"returns\":{\"_0\":\"An array of the returndata from each call.\"}}},\"title\":\"Multicaller\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Contract that allows for efficient aggregation         of multiple calls in a single transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v1/Multicaller.sol\":\"Multicaller\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":0x-settler/=lib/0x-settler/\",\":@matterlabs/zksync-contracts/=/lib/v2-testnet-contracts/\",\":@openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@rari-capital/solmate/=lib/seaport-1.5/lib/solmate/\",\":@uniswap/v2-core/=lib/v2-core/\",\":@uniswap/v3-core/=lib/v3-core/\",\":Multicaller/=lib/Multicaller/src/\",\":ds-test/=lib/seaport-1.5/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-gas-snapshot/=lib/0x-settler/lib/forge-gas-snapshot/src/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":multicaller/=lib/Multicaller/\",\":murky/=lib/seaport-1.5/lib/murky/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":permit2-relay/=lib/permit2-relay/\",\":permit2/=lib/0x-settler/lib/permit2/\",\":seaport-1.5/=lib/seaport-1.5/\",\":seaport-core/=lib/seaport-core/src/\",\":seaport-sol/=lib/seaport-sol/src/\",\":seaport-types/=lib/seaport-core/lib/seaport-types/\",\":seaport/=lib/seaport-sol/lib/seaport/contracts/\",\":solady/=lib/solady/\",\":solarray/=lib/seaport-1.5/lib/solarray/src/\",\":solmate/=lib/solmate/\",\":trustlessPermit/=lib/trustlessPermit/\",\":tstorish/=lib/tstorish/\",\":v2-core/=lib/v2-core/\",\":v2-periphery/=lib/v2-periphery/\",\":v3-core/=lib/v3-core/\"],\"viaIR\":true},\"sources\":{\"src/v1/Multicaller.sol\":{\"keccak256\":\"0x5bdb9430cec63f3418a38b1ef8b2ecd8415540c41cfa6f4c830d57e9b1a273b4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5baaa64baa828329f4eff5ef12b027c377dcf13ef9f7335155f9a73c860ecfa9\",\"dweb:/ipfs/QmYw5EijseukUiZ9QuDwLthy58A3ZvPbN2RwViHTz6A4xV\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"ArrayLengthsMismatch"},{"inputs":[],"stateMutability":"payable","type":"fallback"},{"inputs":[{"internalType":"address[]","name":"targets","type":"address[]"},{"internalType":"bytes[]","name":"data","type":"bytes[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"address","name":"refundTo","type":"address"}],"stateMutability":"payable","type":"function","name":"aggregate","outputs":[{"internalType":"bytes[]","name":"","type":"bytes[]"}]},{"inputs":[],"stateMutability":"payable","type":"receive"}],"devdoc":{"kind":"dev","methods":{"aggregate(address[],bytes[],uint256[],address)":{"details":"Aggregates multiple calls in a single transaction.","params":{"data":"An array of calldata to forward to the targets.","refundTo":"The address to transfer any remaining ETH in the contract after the calls.                 If `address(0)`, remaining ETH will NOT be refunded.                 If `address(1)`, remaining ETH will be refunded to `msg.sender`.                 If anything else, remaining ETH will be refunded to `refundTo`.","targets":"An array of addresses to call.","values":"How much ETH to forward to each target."},"returns":{"_0":"An array of the returndata from each call."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["0x-settler/=lib/0x-settler/","@matterlabs/zksync-contracts/=/lib/v2-testnet-contracts/","@openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/=lib/openzeppelin-contracts/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@rari-capital/solmate/=lib/seaport-1.5/lib/solmate/","@uniswap/v2-core/=lib/v2-core/","@uniswap/v3-core/=lib/v3-core/","Multicaller/=lib/Multicaller/src/","ds-test/=lib/seaport-1.5/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-gas-snapshot/=lib/0x-settler/lib/forge-gas-snapshot/src/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","multicaller/=lib/Multicaller/","murky/=lib/seaport-1.5/lib/murky/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","permit2-relay/=lib/permit2-relay/","permit2/=lib/0x-settler/lib/permit2/","seaport-1.5/=lib/seaport-1.5/","seaport-core/=lib/seaport-core/src/","seaport-sol/=lib/seaport-sol/src/","seaport-types/=lib/seaport-core/lib/seaport-types/","seaport/=lib/seaport-sol/lib/seaport/contracts/","solady/=lib/solady/","solarray/=lib/seaport-1.5/lib/solarray/src/","solmate/=lib/solmate/","trustlessPermit/=lib/trustlessPermit/","tstorish/=lib/tstorish/","v2-core/=lib/v2-core/","v2-periphery/=lib/v2-periphery/","v3-core/=lib/v3-core/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/v1/Multicaller.sol":"Multicaller"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"src/v1/Multicaller.sol":{"keccak256":"0x5bdb9430cec63f3418a38b1ef8b2ecd8415540c41cfa6f4c830d57e9b1a273b4","urls":["bzz-raw://5baaa64baa828329f4eff5ef12b027c377dcf13ef9f7335155f9a73c860ecfa9","dweb:/ipfs/QmYw5EijseukUiZ9QuDwLthy58A3ZvPbN2RwViHTz6A4xV"],"license":"MIT"}},"version":1},"id":56}